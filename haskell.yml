-
  nam: p6
  src: |
        1 == 1
  exp: |
        Prelude> True
-
  nam: p6
  src: |
        2 /= 3
  exp: |
        Prelude> True

-
  nam: wojte
  src: |
    hello "w"
  exp: |
    Prelude> 
    <interactive>:2:1: Not in scope: ‘hello’
-
  nam: checking_type_of_a
  src: |
    :type 'a'
  exp: |
    Prelude> 'a' :: Char
-
  nam: glueing_lists
  src: |
    [1,2] ++ [3,4]
  exp: |
    Prelude> [1,2,3,4]
-
  nam: operator_plus_presence
  src: |
    :info (+)
  exp: |
    Prelude> class Num a where
      (+) :: a -> a -> a
      ...
      	-- Defined in ‘GHC.Num’
    infixl 6 +
-
  nam: type_of_list
  src: |
    :type (1, 2)
  exp: |
    Prelude> (1, 2) :: (Num t1, Num t) => (t, t1)
-
  nam: testing_type_numbers
  src: |
    odd 3
    odd 6
    odd 1.12
  exp: |
    Prelude> True
    Prelude> False
    Prelude> 
    <interactive>:4:1:
        No instance for (Integral a0) arising from a use of ‘odd’
        The type variable ‘a0’ is ambiguous
        Note: there are several potential instances:
          instance Integral Int -- Defined in ‘GHC.Real’
          instance Integral Integer -- Defined in ‘GHC.Real’
          instance Integral GHC.Types.Word -- Defined in ‘GHC.Real’
        In the expression: odd 1.12
        In an equation for ‘it’: it = odd 1.12
    
    <interactive>:4:5:
        No instance for (Fractional a0) arising from the literal ‘1.12’
        The type variable ‘a0’ is ambiguous
        Note: there are several potential instances:
          instance Fractional Double -- Defined in ‘GHC.Float’
          instance Fractional Float -- Defined in ‘GHC.Float’
          instance Integral a => Fractional (GHC.Real.Ratio a)
            -- Defined in ‘GHC.Real’
        In the first argument of ‘odd’, namely ‘1.12’
        In the expression: odd 1.12
        In an equation for ‘it’: it = odd 1.12
-
  nam: testing_integers_and_floats
  src: |
    compare 2 1
    compare 3 4.12
  exp: |
    Prelude> GT
    Prelude> LT
-
  nam: test_type_of_LT
  src: |
    :type LT
  exp: |
    Prelude> LT :: Ordering
-
  nam: tail_and_head
  src: |
    head [ 1, 2, 3, 4 ]
    tail [ 'w', 'o', 'j' ]
  exp: |
    Prelude> 1
    Prelude> "oj"
-
  nam: type_of_it
  src: |
    :type it
  exp: |
    Prelude> 
    <interactive>:1:1:
        Not in scope: ‘it’
        Perhaps you meant ‘id’ (imported from Prelude)
-
  nam: type_of_it_after_a
  src: |
    :type 'a'
    :type it
  exp: |
    Prelude> 'a' :: Char
    Prelude> 
    <interactive>:1:1:
        Not in scope: ‘it’
        Perhaps you meant ‘id’ (imported from Prelude)
-
  nam: wordcount_program
  src: |
    main = interact wordCount
               where wordCount input = show (length(lines input)) ++ "\n"
  exp: |
    Prelude> 
    <interactive>:2:6: parse error on input ‘=’
    Prelude> 
    <interactive>:3:12: parse error on input ‘where’
-
  nam: array_head
  src: |
    head [ 1, 2, 3, 4 ]
    head [ 'a', 'b', 'c', 'd' ]
  exp: |
    Prelude> 1
    Prelude> 'a'
-
  nam: tail_of_array
  src: |
    tail [ 1, 2, 3, 4]
    tail [ 'a', 'e', 'f' ]
  exp: |
    Prelude> [2,3,4]
    Prelude> "ef"
-
  nam: tuples
  src: |
    (1987, "wojtek)
    (1984, "taku)
  exp: |
    Prelude> 
    <interactive>:2:16:
        lexical error in string/character literal at end of input
    Prelude> 
    <interactive>:3:14:
        lexical error in string/character literal at end of input
-
  nam: take_and_drop
  src: |
    take 2 [ 1, 2, 3, 4]
    drop 2 [ 1, 2, 3, 4]
  exp: |
    Prelude> [1,2]
    Prelude> [3,4]
-
  nam: fst_and_snd
  src: |
    fst (1, 'a')
    snd (2, 'b')
  exp: |
    Prelude> 1
    Prelude> 'b'
-
  nam: type_of_lines
  src: |
    :type lines
  exp: |
    Prelude> lines :: String -> [String]
-
  nam: type_of_readfile
  src: |
    :type readFile
  exp: |
    Prelude> readFile :: FilePath -> IO String
-
  nam: define_add
  src: |
    add a b = a + b
  exp: |
    Prelude> 
    <interactive>:2:9: parse error on input ‘=’
-
  nam: trying_to_redef_variable
  src: |
    x = 10
    x = 11
    print x
  exp: |
    Prelude> 
    <interactive>:2:3: parse error on input ‘=’
    Prelude> 
    <interactive>:3:3: parse error on input ‘=’
    Prelude> 
    <interactive>:4:7: Not in scope: ‘x’
-
  nam: lines_method
  src: |
    lines "the quick\nbrown\nfox"
  exp: |
    Prelude> ["the quick","brown","fox"]
-
  nam: type_of_last
  src: |
    :type last
  exp: |
    Prelude> last :: [a] -> a
-
  nam: last_of_array
  src: |
    last [1,2,3,4]
  exp: |
    Prelude> 4
-
  nam: simple_data_keyword
  src: |
    data BookInfo = Book Int String [String]
                    deriving (Show)
  exp: |
    Prelude> Prelude> 
    <interactive>:3:17: parse error on input ‘deriving’
-
  nam: list_concat
  src: |
    1: [2,3]
  exp: |
    Prelude> [1,2,3]
-
  nam: list_concat_wrong
  src: |
    [2, 3] : 1
  exp: |
    Prelude> 
    <interactive>:2:1:
        No instance for (Num [[t0]]) arising from a use of ‘it’
        In a stmt of an interactive GHCi command: print it
-
  nam: length_of_array
  src: |
    length [1,2,3]
  exp: |
    Prelude> 3
-
  nam: type_of_take
  src: |
    :type take
  exp: |
    Prelude> take :: Int -> [a] -> [a]
-
  nam: type_of_3arg_func
  src: |
    :load ah_3arg.hs
    :type my3
  exp: |
    Prelude> [1 of 1] Compiling Main             ( ah_3arg.hs, interpreted )
    Ok, modules loaded: Main.
    *Main> my3 :: Num a => a -> a -> a -> a
-
  nam: type_of_bookinfo
  src: |
    :load ag_simple_data.hs
    Book 123 "sample book" ["author", "author2"]
    :type it
  exp: |
    Prelude> [1 of 1] Compiling Main             ( ag_simple_data.hs, interpreted )
    Ok, modules loaded: Main.
    *Main> Book 123 "sample book" ["author","author2"]
    *Main> it :: BookInfo
-
  nam: book_def
  src: |
    Book 4534 "This is a book title" ["Author", "Some other author"
    ]
  exp: |
    Prelude> 
    <interactive>:2:64:
        parse error (possibly incorrect indentation or mismatched brackets)
    Prelude> 
    <interactive>:3:1: parse error on input ‘]’
